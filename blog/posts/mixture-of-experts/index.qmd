---
title: "Mixture of Experts"
author: "Yuxi Liu"
date: "2024-01-18"
date-modified: "2024-01-20"
categories: [AI, scaling]
format:
  html:
    toc: true
description: "Review of the mixture-of-experts approach, past and present."

# image: "figure/banner.png"
status: "draft"
confidence: "certain"
importance: 5
---

{{< include ../../../static/_macros.tex >}}

## Theory

[Mixture of Experts](https://en.wikipedia.org/wiki/Mixture_of_experts) is an old technique dating back to 1991, but it has become a vital component of modern deep learning to get around the memory bottleneck.

The classical version of MoE is fairly simple: You start with a few machine learning models and then you ensemble them together.

In this example, we train a binary classifier for points in $\R^2$. The distribution is constructed so that points are more likely to be class 1 in the upper-right quadrant, and more likely to be class 0 in the other 3 quadrants.

## Before deep learning

In the beginning was the gaussian. The gaussian is a beautiful distribution, with linearity, the central limit theorem, fast inference, least squares regression, and so on. The problem is that it has just one peak. 

If one wants to model a complicated distribution with several bumps, one can make one step up the staircase of complexity, and build distributions from a linear sum of several gaussians. This is the **mixture of gaussians**.

![A mixture of three gaussian bumps. [Figure from Wikipedia](https://commons.wikimedia.org/wiki/File:Gaussian-mixture-example.svg).](figure/Gaussian-mixture-example.svg)

A mixture of experts is then a simple generalization, and training a mixture of experts, back in the old days, was mostly thought of as statistical inference. The main problem was simply modelling complex data with a larger family of statistical distribution. Their main worry was that the experts would overfit.

They had little data (enough to fit onto a floppy disk), and each expert was usually just a gaussian distibution or a logistic classifier (any more complex and they wouldn't know how to calculate the integrals and derivatives). Consequently, what they ended up trying to solve was to fit a few thousand datapoints using tens of very simple experts.

It is a general fact of classical machine learning that they were very worried about overfitting, and it is reasonable back then to worry, since they had such small datasets (MNIST was in 1994). This, combined with their inability to hand-design learning algorithms for complex machine learning architectures and the slowness of pure gradient descent, meant that machine learning algorithms back then were simple ones fitted onto small datasets.

The overall effect is:

* getting training data: expensive (you have to do it yourself)
* designing the algorithm: expensive (cheaper if you have graduate students)
* training compute: moderate to high (though a few pioneers have bravely pushed to the "very expensive" regime, and failed[^norvig2021])
* inference compute: very cheap (since that you wouldn't be able to train anything large)

[^norvig2021]:
    Peter Norvig, coauthor of the most popular AI textbook, recalls:

    > I certainly remember Geoffrey Hinton came to Berkeley when I was a grad student in 1981, I think, when he talked about these neural nets. And we fellow grad students thought that was so cool. So we said, "Let's go back into the lab and implement it. And of course, there was absolutely nothing you could download, so we had to build it all from scratch. And we got it to do XOR, and then we got it to do something a little bit more complicated. And it was exciting. And then we gave it the first real problem, and it ran overnight, and it didn't converge, and we let it run one more day, and it still didn't converge. And then we gave up, and we went back to our sort of knowledge-based systems approach. But if we had the computing power of today, it probably would have converged after five seconds. [@norvigSingularityEyeBeholder2021]

This should be compared to the very different situation with deep learning:

* getting training data: cheap (just download it online)
* designing the algorithm: cheap (make a standard network, add a few decorations, then use backprop with Adam optimizer)
* training compute: as expensive as you want
* inference compute: as expensive as you want

## After deep learning

While classical statistics and machine learning was mainly constrained by how many partial derivatives and integrals the statistician can calculate confidently on paper,[^confidently-on-paper] deep learning is mainly constrained by memory and compute budget.

[^confidently-on-paper]: If you want a taste of the old days, look at the formulas inside [@jordanHierarchicalMixturesExperts1994]. They explicitly calculated the expectation-maximization algorithms for learning a hierarchy of linear experts.

So when the deep learning era came circa 2012, people immediately started  looking into how to perform **conditional computing**: save computing cost by only calling a small portion of the model. The idea is that you would have different portions of the model be specialized for different forms of input, and for each input, the model would first cheaply find out which expert should handle it, then call upon only the few specialized experts to handle this particular input.

Deep learning came with AlexNet (2012), and the first paper on applying MoE to deep learning was "Learning Factored Representations in a Deep Mixture of Experts" (2013). Things really started heating up though with sparsely-gated MoE (2017).

## Why MoE for deep learning?

Generally, one uses a MoE on the frontier, because:

* You really need to push the metric up by a few points.
* You can't train a dense model larger than the frontier model, because it simply fails to converge, or the hyperparameter settings for the small models don't work for the larger one (and you can't just run a grid search to find it because it costs a million dollars to do a single run).
* You can train around 10 copies of the frontier model, because while you don't have the money to do grid search beyond the current frontier, you have the money to train 10 at the frontier.
* You can't infer a dense model larger than the frontier one, because one dense model $N$ times as wide would cost you $N^2$ amount of storage *and* compute, while if you just train $N$ experts, each with roughly the same architecture as the dense model, it would cost you about $N$ amount of storage *and* about $2$ amount of compute (if only 2 experts are called per query).
* Indeed, if there are too many parameters, then it can't even be fit onto a good GPU and must be split across GPUs, and then the GPU-GPU communication becomes a serious problem (the "von Neumann bottleneck").

![The storage hierarchy. Figure from [Harvard CS 61: *Systems Programming and Machine Organization* (2018), Storage 2: Cache model](https://cs61.seas.harvard.edu/site/2018/Storage2/).](figure/storage-hierarchy.png)

All of which are satisfied by Microsoft, Google, etc. This explains the "rumored" (all but certain at this point) that GPT-4 is a MoE made by multiple GPT-3-like models.

A quick scan of the recent literature shows this, all from Google.

> We present model architectures in which a MoE with up to 137 billion parameters is applied convolutionally between stacked LSTM layers.
> [@shazeerOutrageouslyLargeNeural2017]

> Combining expert, model and data parallelism, we design two large Switch Transformer models, one with 395 billion and 1.6 trillion parameters, respectively.
>
> [@fedusSwitchTransformersScaling2022]

> we demonstrate the potential of V-MoE to scale vision models, and train a 15B parameter model that attains 90.35% on ImageNet.
>
> [@riquelmeScalingVisionSparse2021]

[@shazeerOutrageouslyLargeNeural2017] is not the first paper on MoE in the deep learning era, but it is the most important one. Also notice that it was applied to between "stacked LSTM layers", because it was published before Transformers, back when neural language models meant stacks of LSTM. Nowadays, of course, MoE usually means MoE layers within Transformers, because only with Transformers do people regularly train models beyond 10 billion parameters.


## A toy model

To make this concrete, I coded up system in Python in a Jupyter notebook. See 

```python
import torch
import torch.nn as nn
import torch.optim as optim
import numpy as np
import matplotlib.pyplot as plt

# Generate the dataset
def generate_dataset(num_samples, sharpness=5):
    X = np.random.randn(num_samples, 2)
    p = np.minimum(np.exp(sharpness * np.minimum(X[:, 0], X[:, 1])), 1)
    y = np.random.binomial(1, p, size=num_samples)
    return X, y

# Generate the dataset
num_samples = 1000
X, y = generate_dataset(num_samples)

# Split the dataset manually
split_ratio = 0.8
split_index = int(split_ratio * num_samples)

X_train, X_test = X[:split_index], X[split_index:]
y_train, y_test = y[:split_index], y[split_index:]

# Plot the dataset
def plot_dataset(X, y, ax):
    ax.scatter(X_train[y_train == 0][:, 0], X_train[y_train == 0][:, 1], label='Class 0', marker='o', c='blue')
    ax.scatter(X_train[y_train == 1][:, 0], X_train[y_train == 1][:, 1], label='Class 1', marker='x', c='red')
    ax.set_title('Dataset Scatter Plot')
    return ax

fig, ax = plt.subplots(figsize=(8, 6))
plot_dataset(X_test, y_test, ax)
plt.show()
```
